---
description: 
globs: games/**/*.ts,games/**/*.tsx
alwaysApply: false
---
# 2️⃣ PhaserGameTemplate ルール

## 適用範囲
**ファイルパターン**: `games/p??-*/**/*.{ts,tsx}`  
VetGameSprint の10ゲーム実装ファイルに自動適用。  
Phaser 3 + React コンテナの共通実装パターンを強制し、1週間10ゲーム完成を支援。

## 🎯 設計制約（KPI連動）
- **プレイ時間**: 90秒以内で完了する設計
- **リトライ性**: 60%以上のプレイヤーが再挑戦したくなる仕組み
- **LP遷移**: 15%以上の転職サイト遷移率を狙う報酬設計

## 🛠️ 技術構成

### Phaser 3 + React統合パターン
```typescript
// games/p01-puppy-click/index.tsx
import React, { useEffect, useRef } from 'react';
import Phaser from 'phaser';
import { GameScene } from './GameScene';
import { useGameStore } from '@/packages/game-core';

export const PuppyClickGame: React.FC = () => {
  const gameRef = useRef<Phaser.Game | null>(null);
  const { initGame, updateScore } = useGameStore();

  useEffect(() => {
    // Phaser設定
    const config: Phaser.Types.Core.GameConfig = {
      type: Phaser.AUTO,
      width: 800,
      height: 600,
      parent: 'phaser-game',
      scene: GameScene,
    };
    
    gameRef.current = new Phaser.Game(config);
    initGame('p01-puppy-click');
    
    return () => gameRef.current?.destroy(true);
  }, []);

  return <div id="phaser-game" className="mx-auto" />;
};
```

### ゲームシーン標準構成
```typescript
// games/p01-puppy-click/GameScene.ts
import Phaser from 'phaser';
import { analytics } from '@/packages/utils';

export class GameScene extends Phaser.Scene {
  private startTime!: number;
  private retryCount: number = 0;

  constructor() {
    super({ key: 'GameScene' });
  }

  // 1. 初期化
  init() {
    this.startTime = Date.now();
    
    // Plausible Analytics
    analytics.track('play', {
      gameId: 'p01-puppy-click',
      timestamp: this.startTime,
      userAgent: navigator.userAgent
    });
  }

  // 2. アセット読み込み
  preload() {
    this.load.image('puppy', '/assets/games/p01/puppy.png');
    this.load.audio('click', '/assets/games/p01/click.wav');
  }

  // 3. ゲームオブジェクト作成  
  create() {
    // 90秒制限タイマー
    this.time.addEvent({
      delay: 90000, // 90秒
      callback: this.endGame,
      callbackScope: this
    });

    // ゲームロジック実装
    this.setupGameplay();
  }

  // 4. フレーム更新
  update() {
    // 必要に応じてゲーム状態更新
  }

  private setupGameplay() {
    // ゲーム固有のロジック
  }

  private endGame() {
    const playTime = Date.now() - this.startTime;
    
    // KPI追跡
    analytics.track('game_end', {
      gameId: 'p01-puppy-click',
      playTime: playTime,
      retryCount: this.retryCount
    });

    // 90秒以内完了でボーナス
    if (playTime <= 90000) {
      this.showSuccessModal();
    } else {
      this.showRetryModal();
    }
  }

  private showRetryModal() {
    // React UIコンポーネント経由で表示
    window.dispatchEvent(new CustomEvent('showRetryModal', {
      detail: { gameId: 'p01-puppy-click' }
    }));
  }
}
```

## 📦 共通パッケージ活用

### 1. /packages/game-core 必須利用
```typescript
import { 
  useGameStore,     // Zustand状態管理
  GameConfig,       // 共通設定型
  createGameScene   // ベースシーンクラス
} from '@/packages/game-core';
```

### 2. /packages/ui 統一UI
```typescript
import {
  GameOverOverlay,  // ゲーム終了モーダル
  RetryButton,      // リトライボタン
  LPTransitionButton, // 転職サイト遷移ボタン
  ScoreDisplay,     // スコア表示
  TimerWidget       // 90秒タイマー
} from '@/packages/ui';
```

### 3. /packages/utils アナリティクス
```typescript
import { analytics } from '@/packages/utils';

// 必須イベント追跡
analytics.track('play', { gameId, timestamp });     // ゲーム開始
analytics.track('retry', { gameId, retryCount });   // リトライ
analytics.track('click_lp', { gameId, source });    // LP遷移
```

## 🎯 マーケティング統合パターン

### LP遷移ボタン設置
```typescript
// 各ゲーム終了時に表示
<LPTransitionButton 
  text="転職サイトでキャリアを診断 ▶"
  utm={{
    source: 'game',
    medium: 'web', 
    campaign: 'vetgame',
    content: gameId
  }}
  onClickTracking={() => 
    analytics.track('click_lp', { gameId, score })
  }
/>
```

### 報酬ループ実装
```typescript
// 3回リトライ後の特別オファー
if (retryCount >= 3) {
  showRewardModal({
    title: "獣医師のキャリア診断PDF贈呈！",
    ctaText: "無料でダウンロード ▶",
    onClaim: () => analytics.track('reward_claim', { gameId })
  });
}
```

## 📱 レスポンシブ対応

### Tailwind + Framer Motion統一
```typescript
// React UI部分
<motion.div 
  className="w-full max-w-2xl mx-auto
             p-4 sm:p-6 md:p-8
             bg-white rounded-lg shadow-lg"
  initial={{ opacity: 0, scale: 0.9 }}
  animate={{ opacity: 1, scale: 1 }}
  transition={{ duration: 0.3 }}
>
  {/* ゲームコンテナ */}
</motion.div>
```

## 🚀 高速開発テンプレート

### ファイル構成テンプレート
```
games/p{XX}-{game-name}/
├── index.tsx           # React エントリーポイント
├── GameScene.ts        # メインゲームシーン
├── types.ts           # ゲーム固有型定義
├── components/        # ゲーム専用UIコンポーネント
├── assets/           # ゲーム用アセット
└── README.md         # ゲーム仕様書
```

### 最小実装チェックリスト
- [ ] 90秒以内でプレイ可能
- [ ] リトライボタン実装
- [ ] LP遷移ボタン設置
- [ ] Plausible Analytics埋め込み
- [ ] /packages/game-core利用
- [ ] レスポンシブ対応（Tailwind）

---

**開発優先順位**: 最小コアメカニクス実装 → LP遷移設置 → UI/UX改善 → アニメーション追加

